/*
Names: Tate Morrison, Max Allen, Ian McGrath, and Daniel Langdon
Code: Demo 2
Setup:
Using the motor drive Polula Dual MC33926 Motor Driver shield, the Arduino Uno, and 
a Voltage Monitor. Connect the Motor Driver onto the Arduino Uno, connect a battery to the
voltage monitor and connect the monitor to the motor driver through the two pins. Then connect 
the motors to the two pins next to voltage pins of the motor driver and the encoder wired to an interrupt pin 2 or 3 
and digital pin 5 or 6 with the blue and green wired going to Vcc and ground pins on the motor driver. The motor sign pins 
allow voltage to flow to the motor and the Voltage pins send the voltage to allow the motor to spin. 
Need to run a Raspberry Pi with a camera attached. Pi code looks for markers and sends angle and distance data to the A5 and A4 pins on the arduino 
Code Usage:
This code, when used in conjunction with a robot that is correctly set up, will start in search mode, slowly scanning the environment, and allowing the camera time to find a marker and send it. When 
the arduino recieves an angle and a distance, it will orient itself toward the marker and drive toward it, stopping about a foot short of the marker.
*/

#include <Wire.h>
#define MY_ADDR 8
#define PI 3.14159265358979323  // Defines irrational number PI for mathematical use later

volatile uint8_t offset = 0;
volatile uint8_t instruction[32] = { 0 };
volatile uint8_t msgLength = 0;
volatile uint8_t distanceBit1 = 0;
volatile uint8_t distanceBit2 = 0;
volatile uint8_t angleBit = 0;
volatile bool detection_flag = false;
volatile bool circle_flag = false;
volatile bool go_straight_flag = false;
volatile bool first_flag = true;
volatile bool firstFlagPhi = true;

// These lines define the pins each motor and encoder pins go to
const int MotorVoltage[2] = { 10, 9 };
const int MotorSign[2] = { 8, 7 };
const int encoderInterrupts[2] = { 2, 3 };
const int encoderPins[2] = { 5, 6 };
const int MotorEnable = 4;

// Defines desired delay time
float desired_Ts_ms = 10;
float last_time_ms;

float d = 0.3556;  //m between middles of wheels
float r = 0.07;    //wheel rad m

float lastEncoderTime[2];  //Initializes time variable for use in ISR
float startTime;           //Set up in Setup function to calculate current time in loop
float initialTime;         //Used to calculate time elapsed for velocity
float lastTime;            //Used to compute current time
float currentTime;         //Initializes current time for loop
float timeElapsed;


int count1 = 0;                              //Initializes encoder counts for the ISR
int count2 = 0;                              //Initializes encoder counts for the second encoder ISR
int currentEncoderCount[2] = { 0, 0 };       //Intilization for Encoder Counts to be used in loop
float currentEncoderCountRad[2] = { 0, 0 };  //Converted counts to radian for velocity in rad
int initialEncoderCount[2] = { 0, 0 };       //Found in setup to check for change in counts
float initialEncoderCountRad[2] = { 0, 0 };  //Radian version of initial count
float vel[2] = { 0, 0 };                     //Velocity found from timeelapsed and count/radian change;
float voltage[2] = { 0, 0 };                 // voltage to be used for speed and position control
float batteryVoltage = 7.8;                  //Sets saturation point for battery

// Instantiates all variables for the velocity controller
float phiVel = 0;
float rhoVel = 0;
float errorRhoVel = 0;
float errorPhiVel = 0;
float derivativePhiVel = 0;
float derivativeRhoVel = 0;
float Vbar = 0;
float deltaV = 0;
float errorRhoVelInitial = 0;
float errorPhiVelInitial = 0;
float integralRhoVel = 0; 
float integralPhiVel = 0;
float desiredRhoVel = 0;
float desiredPhiVel = 0;

// Instantiates all variables for position controller
float KiPhi = .45;
float KdPhi = 0;
float KpPhi = 45;

float KiRho = .383;
float KdRho = .2038;
float KpRho = 2.3514;
//Instantiates gain values for PID velocity controller

float KpRhoVel = 100;
float KpPhiVel = 20;
// initialize all position controller variables
float Rho = 0;
float errorRho = 0;
float errorRhoInitial = 0;
float errorPhiInitial = 0;
float derivativeRho = 0;
float integralRho = 0;
float desiredPhi = 0;
float rotations = 0;
float desiredRho = 0;  //m
float errorPhi = 0;
float derivativePhi = 0;
float integralPhi = 0;
float phi = 0;

int mode = 2; //robot mode.  0-turn desiredPhi  1-move straight desiredRho 2- scan environment 3 -wait
int lastMode = 2; 
float startCircleTime; //used to calculate how long robot has been tracing
float stutter = 0; //used to pause 360 scan. allows camera time to calculate and send

// recieved data from camera
float markerAngle;
float markerDistance;



//ISR to check for a change in state of the encoder
void myISR1() {
  if (micros() - lastEncoderTime[0] > 100) {
    if (digitalRead(encoderInterrupts[0]) == digitalRead(encoderPins[0])) {
      count1++;
      count1++;
    } else {
      count1--;
      count1--;
    }
    lastEncoderTime[0] = micros();
  }
}

//ISR to check for a change in state of the encoder
void myISR2() {
  if (micros() - lastEncoderTime[1] > 100) {
    if (digitalRead(encoderInterrupts[1]) == digitalRead(encoderPins[1])) {
      count2++;
      count2++;
    } else {
      count2--;
      count2--;
    }
    lastEncoderTime[1] = micros();
  }
}

//Function to return encoder counts
int MyEnc1() {
  if (digitalRead(encoderInterrupts[0]) != digitalRead(encoderPins[0])) {
    return (count1 + 1);
  } else {
    return (count1);
  }
}

//Function to return encoder counts
int MyEnc2() {
  if (digitalRead(encoderInterrupts[1]) != digitalRead(encoderPins[1])) {
    return (count2 + 1);
  } else {
    return (count2);
  }
}

void setup() {

  for (int i = 0; i < 2; i++) { // For loop to assign pins as outputs/inputs and sets encoders to high for pullup resistor
    pinMode(MotorVoltage[i], OUTPUT);
    pinMode(MotorSign[i], OUTPUT);
    pinMode(encoderInterrupts[i], INPUT);
    digitalWrite(encoderInterrupts[i], HIGH);
  }
  
  attachInterrupt(digitalPinToInterrupt(encoderInterrupts[0]), myISR1, CHANGE); //interrupt pins
  attachInterrupt(digitalPinToInterrupt(encoderInterrupts[1]), myISR2, CHANGE);
  pinMode(MotorEnable, OUTPUT);
  digitalWrite(MotorEnable, HIGH);

  initialEncoderCount[0] = MyEnc1(); //encoder counts 
  initialEncoderCount[1] = MyEnc2();
  
  for (int i = 0; i < 2; i++) {
    initialEncoderCountRad[i] = 2 * PI * (float)(initialEncoderCount[i]) / 3200;
    lastEncoderTime[i] = micros();
  }

  Serial.begin(115200);
  // We want to control the built-in LED (pin 13)
  pinMode(LED_BUILTIN, OUTPUT);

  //PI integration 
  // Initialize I2C
  Wire.begin(MY_ADDR);
  // Set callbacks for I2C interrupts
  Wire.onReceive(receive);

  startTime = millis(); //startup variables for consistency
  initialTime = millis();

  // Variables for desired angle and distance to travel in radians and meters
  //desiredPhi = PI/2;
  // desiredRho = 0.3;
}

void loop() {

  // If there is data on the buffer, read it
  if (msgLength > 0) {  //data from PI
    if (offset == 1) {
      digitalWrite(LED_BUILTIN, instruction[0]);
    }
    printReceived();
    msgLength = 0;
  }

  lastTime = millis(); //Compute current time
  currentTime = (float)((lastTime - startTime) / 1000); //more time vars for time-keeping
  timeElapsed = (float)(millis() - initialTime) / 1000;
  currentEncoderCount[0] = MyEnc1();
  currentEncoderCount[1] = MyEnc2();


  for (int i = 0; i < 2; i++) { //for each wheel
    currentEncoderCountRad[i] = 2 * PI * (float)(currentEncoderCount[i]) / 3200; //find encoder counts in radians
    if (timeElapsed > 0) {
      vel[i] = (currentEncoderCountRad[i] - initialEncoderCountRad[i]) / timeElapsed; // use encoders to find velocity
    }
  }

  //ATObot position vars
  Rho = (r / 2) * (currentEncoderCountRad[0] + currentEncoderCountRad[1]); 
  phi = (r / d) * (currentEncoderCountRad[0] - currentEncoderCountRad[1]);



  switch (mode) { // Start of case machine for ATObot modes
    
    case 0:  // turn a desired angle phi
      
      desiredRho = 0; // want no change in rho
      desiredRhoVel = 0;  

      if (phi <= (desiredPhi + (3 * PI / 180)) && phi >= (desiredPhi + (-3 * PI / 180))) {  // if atobot is correctly oriented towards marker within 3 deg
        // Serial.print("reached desired phi");
        if (lastMode == 2 || go_straight_flag == true) {  // go into straight case 

          resetVelController();                                                             //void left over junk values
          desiredRhoVel = 0; 
          lastMode = 0;
          mode = 1; // go straight
          desiredRho = markerDistance - .10;                                                 //stop 10 cm away from marker
        }
      }
      break;

    case 1: //Go straight using PID controller

      if (abs(Rho) >= abs(desiredRho)) {                                                    //reached marker
        lastMode = mode;
        mode = 3;                                      //wait to get graded
      }
      break;
    case 2:                //scan environment while waiting for camera

      desiredRhoVel = 0;
      //desiredPhiVel = 7.5;

      if (currentTime - stutter < 0.75 && detection_flag != true && detection_flag != true) {         //bounce between wait case and scan case to allow camera time to calculate and send
        desiredPhiVel = -7.5;
        desiredRhoVel = 0;
      } else {
        stutter = currentTime;       //keep track of wait time
        lastMode = mode;
        resetVelController();

        mode = 3;
      }
      if (detection_flag == true) {     // camera sends data
        Serial.print("Found marker");
        resetVelController();
        lastMode = 2;
        mode = 0;
        desiredPhi = markerAngle;       //turn towards marker

        delay(1500);
      }

      break;
    case 3:  //wait
      Serial.print("waiting...");
      desiredPhiVel = 0;                 //want no motion in rho of phi
      desiredRhoVel = 0; 
      desiredPhi = 0;
      desiredRho = 0;
      if (lastMode == 2 && (currentTime - stutter >= 3.75)) {     // go to scan case when done waiting for camera
        lastMode = 3;
        mode = 2;
        stutter = currentTime; //
      }
      analogWrite(MotorVoltage[0], 0);            //catchall for do nothing case
      analogWrite(MotorVoltage[1], 0);
      break;
  }

  //Serial.println(mode);
  if (mode == 1 || mode == 0) {                                                      // if we need a velocity controller,
    errorPhi = desiredPhi - phi;                                                     //error phi
    derivativePhi = (errorPhi - errorPhiInitial) / ((float)(desired_Ts_ms / 1000));  //D controller
    integralPhi = integralPhi + errorPhi * ((float)(desired_Ts_ms / 1000));          //I controller
    desiredPhiVel = errorPhi * KpPhi + KdPhi * derivativePhi + KiPhi * integralPhi;  //PID controller
    if (abs(desiredPhiVel) > 10) {                                                   //cap phi speed
      desiredPhiVel = 10 * desiredPhiVel / abs(desiredPhiVel);                       // but keep sign
    }

    errorRho = desiredRho - Rho;                                                      //position control
    derivativeRho = (errorRho - errorRhoInitial) / ((float)(desired_Ts_ms / 1000));
    integralRho = integralRho + errorRho * ((float)(desired_Ts_ms / 1000));
    desiredRhoVel = errorRho * KpRho + KdRho * derivativeRho + KiRho * integralRho;   //find desired Rho vel from controller

    if (abs(desiredRhoVel) > 7) {                                                     //cap RhoVel
      desiredRhoVel = 7 * desiredRhoVel / abs(desiredRhoVel);                         //but keep its sign
    }            
  }
  phiVel = (r / d) * (vel[0] - vel[1]);                                               // use calculated wheel velocity find velocities at center of rotation
  rhoVel = (r / 2) * (vel[0] + vel[1]);                                               // forward vel of atobot

  errorRhoVel = rhoVel - desiredRhoVel;
  errorPhiVel = phiVel - desiredPhiVel;


  Serial.print("\t mode ");            //debugging prints
  Serial.print(mode);
  Serial.print("\t");
  Serial.print(desiredPhi);
  Serial.print("\t");
  Serial.print(phi);
  Serial.print("\t");
  Serial.print(desiredRho);
  Serial.print("\t");
  Serial.println(Rho);

   //proportional voltage calculations
  Vbar = errorRhoVel * KpRhoVel;    
  deltaV = errorPhiVel * KpPhiVel;  
  voltage[0] = (Vbar + deltaV) / 2;
  voltage[1] = (Vbar - deltaV) / 2;
  
  if (mode != 3) { //wait case
    for (int i = 0; i < 2; i++) {                      // for each wheel
      if (voltage[i] >= 0) {                           //turn correct direction
        digitalWrite(MotorSign[i], HIGH);
        analogWrite(MotorVoltage[i], abs(voltage[i]));  //apply voltage to motors
      } else {
        digitalWrite(MotorSign[i], LOW);
        analogWrite(MotorVoltage[i], abs(voltage[i]));  
      }
    }
  } else if (mode == 3) {  //mode 3 does nothing
    analogWrite(MotorVoltage[0], 0);
    analogWrite(MotorVoltage[1], 0);
  }


  //Sets old values to new values
  // errorRhoVelInitial = errorRhoVel;
  // errorPhiVelInitial = errorPhiVel;
  errorRhoInitial = errorRho;
  errorPhiInitial = errorPhi;
  for (int i = 0; i < 2; i++) {
    initialEncoderCount[i] = currentEncoderCount[i];
    initialEncoderCountRad[i] = currentEncoderCountRad[i];
  }
  initialTime = millis();
  while (millis() < last_time_ms + desired_Ts_ms) {
    //wait till desired time passes
  }
  last_time_ms = millis();
}

// printReceived helps us see what data we are getting from the leader
void printReceived() {
  detection_flag = true;
  Serial.print("Message: ");
  for (int i = 0; i < msgLength; i++) {
    Serial.print(String((char)instruction[i]));
  }
  Serial.println("");

  // Pulling info from our Pi encoding
  distanceBit1 = instruction[0] - 48;
  distanceBit2 = instruction[1] - 48;
  angleBit = instruction[2] - 48;

  Serial.print("Distance bit: ");
  Serial.print((distanceBit1 * 10) + distanceBit2);
  Serial.println("");

  Serial.print("Angle bit: ");
  Serial.print(angleBit);
  Serial.println("");

  // Decoding the bits to an average distance / angle
  // DISTANCE
  if (mode == 0) {
    desiredRho = 0;
  }
  /*
  else if (distanceBit == 1) {
    markerDistance = 3.5;
  } else if (distanceBit == 2) {
    markerDistance = 3;
  } else if (distanceBit == 3) {
    markerDistance = 2.5;
  } else if (distanceBit == 4) {
    markerDistance = 2;
  } else if (distanceBit == 5) {
    markerDistance = 1.5;
  } else if (distanceBit == 6) {
    markerDistance = 1;
  } else if (distanceBit == 7) {
    markerDistance = 0.75;
  } else if (distanceBit == 8) {
    markerDistance = 0.55;
  } else if (distanceBit == 9) {
    markerDistance = 0.5;
    go50 = true;
  }
  */

  markerDistance = ((distanceBit1 * 10) + distanceBit2) * 0.025;

  Serial.print("Distance: ");
  Serial.print(markerDistance);
  Serial.println("");

  // ANGLE
  if (circle_flag == true) {
    // do nothing
  } else if (angleBit == 1) {
    markerAngle = -26.25;
    markerAngle = markerAngle * 0.0174533;

  } else if (angleBit == 2) {
    markerAngle = -18.75;
    markerAngle = markerAngle * 0.0174533;

  } else if (angleBit == 3) {
    markerAngle = -11.25;
    markerAngle = markerAngle * 0.0174533;

  } else if (angleBit == 4) {
    markerAngle = -5.25;
    markerAngle = markerAngle * 0.0174533;

  } else if (angleBit == 5) {
    markerAngle = 0;
    markerAngle = markerAngle * 0.0174533;
    go_straight_flag = true;
    //mode = 1;

  } else if (angleBit == 6) {
    markerAngle = 5.25;
    markerAngle = markerAngle * 0.0174533;

  } else if (angleBit == 7) {
    markerAngle = 11.25;
    markerAngle = markerAngle * 0.0174533;

  } else if (angleBit == 8) {
    markerAngle = 18.75;
    markerAngle = markerAngle * 0.0174533;

  } else if (angleBit == 9) {
    markerAngle = 26.25;
    markerAngle = markerAngle * 0.0174533;
  }


  Serial.print("Angle: ");
  Serial.print(markerAngle);
  Serial.println("");
}


// function called when an I2C interrupt event happens
void receive() {
  // Set the offset, this will always be the first byte.
  offset = Wire.read();
  // If there is information after the offset, it is telling us more about the command.
  while (Wire.available()) {
    instruction[msgLength] = Wire.read();
    msgLength++;
  }
}
void resetVelController(){
  phi = 0;
  Rho = 0;
  errorRho = 0;
  errorPhi = 0;
  errorPhiVel = 0;
  errorRhoVel = 0;
  count1 = 0;
  count2 = 0;
  desiredPhi = 0;
  desiredRho = 0;
}
